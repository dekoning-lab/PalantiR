// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// HasegawaKishinoYano
List HasegawaKishinoYano(arma::vec equilibrium, double transition_rate, double transversion_rate);
RcppExport SEXP PalantiR_HasegawaKishinoYano(SEXP equilibriumSEXP, SEXP transition_rateSEXP, SEXP transversion_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type equilibrium(equilibriumSEXP);
    Rcpp::traits::input_parameter< double >::type transition_rate(transition_rateSEXP);
    Rcpp::traits::input_parameter< double >::type transversion_rate(transversion_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(HasegawaKishinoYano(equilibrium, transition_rate, transversion_rate));
    return rcpp_result_gen;
END_RCPP
}
// MutationSelection
List MutationSelection(unsigned long long population_size, double mutation_rate, arma::vec nucleotide_equilibrium, arma::mat nucleotide_transition, arma::vec fitness);
RcppExport SEXP PalantiR_MutationSelection(SEXP population_sizeSEXP, SEXP mutation_rateSEXP, SEXP nucleotide_equilibriumSEXP, SEXP nucleotide_transitionSEXP, SEXP fitnessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long long >::type population_size(population_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type mutation_rate(mutation_rateSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nucleotide_equilibrium(nucleotide_equilibriumSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nucleotide_transition(nucleotide_transitionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fitness(fitnessSEXP);
    rcpp_result_gen = Rcpp::wrap(MutationSelection(population_size, mutation_rate, nucleotide_equilibrium, nucleotide_transition, fitness));
    return rcpp_result_gen;
END_RCPP
}
// Phylogeny
List Phylogeny(std::string newick);
RcppExport SEXP PalantiR_Phylogeny(SEXP newickSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type newick(newickSEXP);
    rcpp_result_gen = Rcpp::wrap(Phylogeny(newick));
    return rcpp_result_gen;
END_RCPP
}
